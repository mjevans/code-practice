// kate: space-indent off; indent-width 8; tab-width 8; mixedindent off; indent-mode tab;
package main

// 2024 - Michael J Evans
// Code in this file is CC BY-SA 4.0, though Euler's problems are under another NC version of the license https://creativecommons.org/licenses/by-sa/4.0/

/*
https://projecteuler.net/copyright
https://creativecommons.org/licenses/by-nc-sa/4.0/
https://projecteuler.net/problem=45
https://projecteuler.net/minimal=45

<p>Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:</p>
<table><tr><td>Triangle</td>
<td> </td>
<td>$T_n=n(n+1)/2$</td>
<td> </td>
<td>$1, 3, 6, 10, 15, \dots$</td>
</tr><tr><td>Pentagonal</td>
<td> </td>
<td>$P_n=n(3n - 1)/2$</td>
<td> </td>
<td>$1, 5, 12, 22, 35, \dots$</td>
</tr><tr><td>Hexagonal</td>
<td> </td>
<td>$H_n=n(2n - 1)$</td>
<td> </td>
<td>$1, 6, 15, 28, 45, \dots$</td>
</tr></table><p>It can be verified that $T_{285} = P_{165} = H_{143} = 40755$.</p>
<p>Find the next triangle number that is also pentagonal and hexagonal.</p>


*/
/*

They're back: Given Xn = 40755 == T(285) == P(165) == H(143)
Find the next number X(n+1) that satisfies Tx==Py==Hz

T(n) = n*(n+1) / 2
P(n) = n*(3*n - 1) / 2
H(n) = n*(2*n - 1)

Triangle Numbers also happen to be the 'series summation' for the range 0..n - so an iterator for finding the next value is as easy as just adding repeatedly

Xn == T(x) = x*(x+1) / 2
Xn == P(y) = y*(3*y - 1) / 2
Xn == H(z) = z*(2*z - 1)

x == ( -1 + sqrt(1 +  8 * Xn) ) / ( 2 )
y == (  1 + sqrt(1 + 24 * Xn) ) / ( 6 )
z == (  1 + sqrt(1 +  8 * Xn) ) / ( 4 )

y*(3*y - 1) / 2 == z*(2*z - 1)
x*(x+1) / 2 == y*(3*y - 1) / 2
x*(x+1) / 2 == z*(2*z - 1)

y*(3*y - 1) == 2*z*(2*z - 1)
x*(x+1) == y*(3*y - 1)
x*(x+1) == 2*z*(2*z - 1)

Just try one first
y*(3*y - 1) == 2*z*(2*z - 1)
3*y*y - y == 4*z*z - 2*z
3*(  1 + sqrt(1 + 24 * Xn) ) / ( 6 )*(  1 + sqrt(1 + 24 * Xn) ) / ( 6 ) - (  1 + sqrt(1 + 24 * Xn) ) / ( 6 ) == 4*(  1 + sqrt(1 +  8 * Xn) ) / ( 4 )*(  1 + sqrt(1 +  8 * Xn) ) / ( 4 ) - 2*(  1 + sqrt(1 +  8 * Xn) ) / ( 4 )
(  1 + sqrt(1 + 24 * Xn) ) / ( 2 )*(  1 + sqrt(1 + 24 * Xn) ) / ( 6 ) - (  1 + sqrt(1 + 24 * Xn) ) / ( 6 ) == (  1 + sqrt(1 +  8 * Xn) )*(  1 + sqrt(1 +  8 * Xn) ) / ( 4 ) - (  1 + sqrt(1 +  8 * Xn) ) / ( 2 )
*12
(  1 + sqrt(1 + 24 * Xn) )*(  1 + sqrt(1 + 24 * Xn) )  -  2*(  1 + sqrt(1 + 24 * Xn) ) == 3*(  1 + sqrt(1 +  8 * Xn) )*(  1 + sqrt(1 +  8 * Xn) )  -  6*(  1 + sqrt(1 +  8 * Xn) )
This seems... unlikely to be useful, but pressing ahead
(  1 + sqrt(1 + 24 * Xn) )*(  1 + sqrt(1 + 24 * Xn) )  -  2*(  1 + sqrt(1 + 24 * Xn) ) == 3*(  1 + sqrt(1 +  8 * Xn) )*(  1 + sqrt(1 +  8 * Xn) )  -  6*(  1 + sqrt(1 +  8 * Xn) )
1 + 2*sqrt(1 + 24 * Xn)  +  sqrt(1 + 24 * Xn)*sqrt(1 + 24 * Xn)  -  2  +  2*sqrt(1 + 24 * Xn)
4*sqrt(1 + 24 * Xn)  +  1 + 24 * Xn -  1
24 * Xn + 4*sqrt(1 + 24 * Xn) + 0 == ...
3*(  1 + sqrt(1 +  8 * Xn) )*(  1 + sqrt(1 +  8 * Xn) )  -  6*(  1 + sqrt(1 +  8 * Xn) )
3*(  1 + sqrt(1 +  8 * Xn) + sqrt(1 +  8 * Xn) + sqrt(1 +  8 * Xn) * sqrt(1 +  8 * Xn) )  -  6  +  6*sqrt(1 +  8 * Xn)
3*(  1 + 2*sqrt(1 +  8 * Xn) + 1 +  8*Xn )  -  6  +  6*sqrt(1 +  8 * Xn)
3 + 6*sqrt(1 +  8 * Xn) + 3 +  24*Xn  -  6  +  6*sqrt(1 +  8 * Xn)
12*sqrt(1 +  8 * Xn) + 24*Xn  + 0 == ...
24*Xn + 4*sqrt(1 + 24 * Xn) + 0 == 24*Xn + 12*sqrt(1 +  8 * Xn) + 0
sqrt(1 + 24 * Xn) = 3*sqrt(1 +  8 * Xn)

Check if that's nonsense or not...

sqrt(1 + 24 * 40755) = 3 * sqrt( 1 + 8 * 40755)
989 = 1713

Dead end here,  I thought it might be worthless to compare the sides given the square roots, though the Triangle and Hexagonal numbers share a common sqrt()...


*/

import (
	// "bufio"
	"euler"
	"fmt"
	// "math"
	// "math/big"
	// "slices" // Doh not in 1.19
	// "strings"
	// "strconv"
	// "os" // os.Stdout
)

func Euler045(floor uint64) uint64 {
	var ii, t, p, h uint64
	ii = euler.HexagonalNumberReverseFloor(floor) + 1
	t = 1
	p = 2
	h = 3
	for ; t != p || t != h; ii++ {
		h = euler.HexagonalNumber(ii)
		p = euler.PentagonalNumber(euler.PentagonalNumberReverseFloor(h))
		if h != p {
			continue
		}
		t = euler.TriangleNumber(euler.TriangleNumberReverseFloor(h))
	}
	return h
}

//
/*
	for ii in *\/*.go ; do go fmt "$ii" ; done ; for ii in 45 ; do go fmt $(printf "pe_%04d.go" "$ii") ; go run $(printf "pe_%04d.go" "$ii") || break ; done

Euler 45: Triangular, Pentagonal, and Hexagonal: 1533776805


*/
func main() {
	//test

	//run
	a := Euler045(40755)
	fmt.Printf("Euler 45: Triangular, Pentagonal, and Hexagonal: %d\n", a)
}
