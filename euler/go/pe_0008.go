// kate: space-indent off; indent-width 8; tab-width 8; mixedindent off; indent-mode tab;
package main

// golang 1.19 is current Debian stable
// 2024 - Michael J Evans ***REMOVED***

/* https://projecteuler.net/minimal=8
<p>The four adjacent digits in the $1000$-digit number that have the greatest product are $9 \times 9 \times 8 \times 9 = 5832$.</p>
<p class="monospace center">
73167176531330624919225119674426574742355349194934<br>
96983520312774506326239578318016984801869478851843<br>
85861560789112949495459501737958331952853208805511<br>
12540698747158523863050715693290963295227443043557<br>
66896648950445244523161731856403098711121722383113<br>
62229893423380308135336276614282806444486645238749<br>
30358907296290491560440772390713810515859307960866<br>
70172427121883998797908792274921901699720888093776<br>
65727333001053367881220235421809751254540594752243<br>
52584907711670556013604839586446706324415722155397<br>
53697817977846174064955149290862569321978468622482<br>
83972241375657056057490261407972968652414535100474<br>
82166370484403199890008895243450658541227588666881<br>
16427171479924442928230863465674813919123162824586<br>
17866458359124566529476545682848912883142607690042<br>
24219022671055626321111109370544217506941658960408<br>
07198403850962455444362981230987879927244284909188<br>
84580156166097919133875499200524063689912560717606<br>
05886116467109405077541002256983155200055935729725<br>
71636269561882670428252483600823257530420752963450<br></p>
<p>Find the thirteen adjacent digits in the $1000$-digit number that have the greatest product. What is the value of this product?</p>


*/

import (
	"euler"
	"fmt"
	// "slices" // Doh not in 1.19
	// "sort"
	// "strings"
	"strconv"
	// "os" // os.Stdout
)

func Euler008(span int, rawnum string) (int, []int) {
	if "" == rawnum {
		rawnum = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
	}
	num := make([]int, 0, len(rawnum))
	for _, v := range rawnum {
		digit, ok := strconv.ParseInt(string(v), 10, 0)
		if nil != ok {
			fmt.Println("")
			panic(fmt.Sprint("Unable to parse digit: '", v, "'"))
		}
		num = append(num, int(digit))
	}
	var max, maxstart int
	for ii := 0; ii < len(num)-span; ii++ {
		run := euler.ListMul(num[ii : ii+span])
		if run > max {
			max = run
			maxstart = ii
		}
	}
	cspan := make([]int, 0, span)
	for ii := maxstart; ii < maxstart+span; ii++ {
		cspan = append(cspan, num[ii])
	}
	return max, cspan
}

func main() {
	// The four adjacent digits in the $1000$-digit number that have the greatest product are $9 	\times 9 \times 8 \times 9 = 5832$
	prod, _ := Euler008(4, "")
	fmt.Println(prod == 5832, "\tDid the check output 5832?\t", prod)
	// Question
	prod, span := Euler008(13, "")
	fmt.Println(prod, "\tproduct across int-span\t", span)

}
