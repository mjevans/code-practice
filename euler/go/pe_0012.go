// kate: space-indent off; indent-width 8; tab-width 8; mixedindent off; indent-mode tab;
package main

// golang 1.19 is current Debian stable
// 2024 - Michael J Evans ***REMOVED***

/* https://projecteuler.net/minimal=12
<p>The sequence of triangle numbers is generated by adding the natural numbers. So the $7$<sup>th</sup> triangle number would be $1 + 2 + 3 + 4 + 5 + 6 + 7 = 28$. The first ten terms would be:
$$1, 3, 6, 10, 15, 21, 28, 36, 45, 55, \dots$$</p>
<p>Let us list the factors of the first seven triangle numbers:</p>
\begin{align}
\mathbf 1 &amp;\colon 1\\
\mathbf 3 &amp;\colon 1,3\\
\mathbf 6 &amp;\colon 1,2,3,6\\
\mathbf{10} &amp;\colon 1,2,5,10\\
\mathbf{15} &amp;\colon 1,3,5,15\\
\mathbf{21} &amp;\colon 1,3,7,21\\
\mathbf{28} &amp;\colon 1,2,4,7,14,28
\end{align}
<p>We can see that $28$ is the first triangle number to have over five divisors.</p>
<p>What is the value of the first triangle number to have over five hundred divisors?</p>




*/

import (
	"euler"
	"fmt"
	// "slices" // Doh not in 1.19
	// "sort"
	// "strings"
	// "strconv"
	// "os" // os.Stdout
)

func Euler012(minDivisors int) int {
	var factors *[]int
	primes := euler.GetPrimes(nil, 56)
	triangle, ii := 0, 0
	for {
		triangle += ii
		factors = euler.Factor(primes, triangle)
		divisors := euler.Factorial(len(*factors))
		if divisors >= minDivisors {
			fmt.Println(triangle, ii, divisors, *factors)
			break
		}
		ii++
	}
	return triangle
}

func main() {
	// fmt.Println(grid)
	//test
	ans := Euler012(5)
	fmt.Println("Euler012:\tFirst number with 5 factors:\t", ans, ans == 28)
	//run
	ans = Euler012(501)
	fmt.Println("Euler012:\tFirst number with 501+ factors:\t", ans)
}
